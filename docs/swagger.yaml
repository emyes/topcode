swagger: '2.0'

info:
  version: "1.0.0"
  title: Doppler App REST API
host: localhost:8080
basePath: /api/v1
schemes:
  - http
  - https
produces:
  - application/json
consumes:
  - application/json

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header

paths:
  /login:
    post:
      summary: login with email and password
      description: >
        - The backend authenticates with SSO (SAML) using the email and password
        
        - After authentication, the user information will be returned from SAML
        
        - Check if the user already registered
        
        - Create or update the user with the information from SAML
      tags:
      - Auth
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
            required:
              - email
              - password
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/LoginResponse"
        400:
          description: missing email or password | invalid email
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: wrong email or password
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"
            
  /topics:
    get:
      summary: get all topics
      description: the results should be sorted by name ascending
      tags:
        - Topic
      security:
        - Bearer: []
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Topic"

  /userTopics:
    post:
      summary: update the user topics for the logged-in user
      description: >
        - Delete all user topics in database that the `id` is not present in the request body
        
        - For each item in the request body
        
          - If the `id` is present, check if the id exists and update the user topic
          - If the `id` is not present, create the user topic
        
        - If the user is a new user (isNew = true) and there is at least 1 user topic
          - Update user `isNew` flag to false
          - Add a new `UserRewardPoint` for completing the user profile, the points should be configurable
          - Add the points to the `User.points`
          - Return the `UserRewardPoint`
        
        - Return null
      tags:
        - User Topic
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/UserTopic"
      responses:
        200:
          description: successful operation, the response includes the user reward if it's a new user, otherwise, null
          schema:
            $ref: "#/definitions/UserRewardPoint"
        400:
          description: invalid request
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"

    get:
      summary: get all user topics for the logged-in user
      security:
        - Bearer: []
      tags:
        - User Topic
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/UserTopic"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"

  /carousels:
    get:
      summary: get all carousels
      tags:
        - Carousel
      security:
        - Bearer: []
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Carousel"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"
  
  /userSettings:
    get:
      summary: get the current logged-in user settings
      tags:
        - User Setting
      security:
        - Bearer: []
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/UserSetting"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"
    post:
      summary: create or update the current logged-in user settings
      tags:
        - User Setting
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/UserSetting"
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/UserSetting"
        400:
          description: invalid request
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"
            
  /users:
    get:
      summary: search users, results should be sorted by fullName
      tags:
        - User
      security:
        - Bearer: []
      parameters:
        - in: query
          name: limit
          type: integer
          description: the search limit. Must be greater than 0 if present
        - in: query
          name: offset
          type: integer
          description: the search offset. Must be not less than 0 if present
        - in: query
          name: keyword
          type: string
          description: the keyword filter. Should be search in fullName or email (i.e. fullName LIKE %keyword% OR email LIKE %keyword%)
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              total:
                type: integer
              items:
                type: array
                items:
                  $ref: "#/definitions/User"
        400:
          description: invalid request
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"
              
  /events:
    get:
      summary: search events
      tags:
        - Event
      security:
        - Bearer: []
      parameters:
        - in: query
          name: limit
          type: integer
          description: the search limit. Must be greater than 0 if present
        - in: query
          name: offset
          type: integer
          description: the search offset. Must be not less than 0 if present
        - in: query
          name: sortBy
          type: string
          description: the sort field. Allow `firstSessionStart` (sort by the first session's start date)
        - in: query
          name: sortDirection
          type: string
          description: the sort direction. Allow `asc` and `desc`. Default to `asc` if not present
        - in: query
          name: topicId
          type: string
          description: the topic UUID filter
        - in: query
          name: status
          type: string
          enum:
            - PAST
            - UPCOMING
          description: the status filter. If `PAST`, filter only the completed events. If `UPCOMING`, filter only the events which have not been completed
        - in: query
          name: onlyMyEvents
          type: boolean
          description: the onlyMyEvents filter. True to filter only the events to which the current users registered. Default to false if not present
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              total:
                type: integer
              items:
                type: array
                items:
                  $ref: "#/definitions/Event"
        400:
          description: invalid request
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"

  /events/{eventId}:
    get:
      summary: get an event
      tags:
        - Event
      security:
        - Bearer: []
      parameters:
        - in: path
          name: eventId
          required: true
          type: string
          description: the event UUID
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/Event"
        400:
          description: invalid request
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        404:
          description: the event does not exist
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"
  
  /events/{eventId}/share:
    post:
      summary: share the event to other users
      description: >
         - share the event by creating new notifications for the specified users about the event
         - the notification message should be configurable
      tags:
        - Event
      security:
        - Bearer: []
      parameters:
        - in: path
          name: eventId
          required: true
          type: string
          description: the event UUID
        - in: body
          name: body
          required: true
          schema:
            type: array
            items:
              properties:
                userId:
                  type: string
      responses:
        204:
          description: successful operation
        400:
          description: invalid request
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        404:
          description: the event does not exist
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"

  /events/{eventId}/register:
    post:
      summary: register the current logged-in user to an event
      description: >
        - Make sure that the user has not registered to the event yet
        
        - Add a new `UserEvent`
        
        - Add a new `UserRewardPoint` for registering to the event, the points should be taken from the `Event.pointsForRegistering`
        
        - Add the points to the `User.points`
        
        - Return the `UserRewardPoint`
      tags:
        - User Event
      security:
        - Bearer: []
      parameters:
        - in: path
          name: eventId
          required: true
          type: string
          description: the event UUID
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/UserRewardPoint"
        400:
          description: invalid request
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        404:
          description: the event does not exist
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"

  /events/{eventId}/attendees:
    get:
      summary: get all attendees of a specific event
      tags:
        - User Event
      security:
        - Bearer: []
      parameters:
        - in: path
          name: eventId
          required: true
          type: string
          description: the event UUID
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        400:
          description: invalid request
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        404:
          description: the event does not exist
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"

  /events/{eventId}/scanTicket:
    post:
      summary: confirm the atttendance to the event
      description: >
        - NOTE this endpoint will use a special configurable bearer token to authenticate (`token.m2m`)
      
        - Make sure that the user has not scan the ticket yet (UserEvent.ticketScanned = false)
        
        - Update the `UserEvent.ticketScanned` to true
        
        - Add a new `UserRewardPoint` for attending the event, the points should be taken from the `Event.pointsForScanningTicket`
        
        - Add the points to the `User.points`
        
        - Return the `UserRewardPoint`
      tags:
        - User Event     
      security:
        - Bearer: []
      parameters:
        - in: path
          name: eventId
          required: true
          type: string
          description: the event UUID
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              userId:
                type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/UserRewardPoint"
        400:
          description: invalid request
          schema:
            $ref: "#/definitions/ErrorMessage"
        404:
          description: the event does not exist
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"

  /events/{eventId}/comments:
    parameters:
    - in: path
      name: eventId
      required: true
      type: string
      description: the event UUID

    post:
      summary: create a new comment
      tags:
        - Event Comment
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/EventCommentRequest"
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/EventComment"
        400:
          description: invalid request
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        404:
          description: the event does not exist
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"
    get:
      summary: search event comments
      tags:
        - Event Comment
      security:
        - Bearer: []
      parameters:
        - in: query
          name: limit
          type: integer
          description: the search limit. Must be greater than 0 if present
        - in: query
          name: offset
          type: integer
          description: the search offset. Must be not less than 0 if present
        - in: query
          name: sortBy
          type: string
          description: the sort field. Allow `createdAt` and `likeCount`
        - in: query
          name: sortDirection
          type: string
          description: the sort direction. Allow `asc` and `desc`. Default to `asc` if not present
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              count:
                type: integer
              rows:
                type: array
                items:
                  $ref: "#/definitions/EventComment"
        400:
          description: invalid request
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        404:
          description: the event does not exist
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"

  /events/{eventId}/comments/{commentId}:
    parameters:
    - in: path
      name: eventId
      required: true
      type: string
      description: the event UUID
    - in: path
      name: commentId
      required: true
      type: string
      description: the event comment UUID
    
    put:
      summary: update an event comment
      tags:
        - Event Comment
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/EventCommentRequest"
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/EventComment"
        400:
          description: invalid request
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        403:
          description: the user is not allowed to update another user's comment | not allowed to update deleted comment
          schema:
            $ref: "#/definitions/ErrorMessage"
        404:
          description: the event or event comment does not exist
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"

    delete:
      summary: delete an event comment (soft delete)
      description: >
        - soft delete using a delete flag 
        
        - set the comment message to "This comment has been deleted" so that no one can recover the message
      tags:
        - Event Comment
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/EventComment"
        400:
          description: invalid request
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        403:
          description: the user is not allowed to delete another user's comment | not allowed to delete deleted comment
          schema:
            $ref: "#/definitions/ErrorMessage"
        404:
          description: the event or event comment does not exist
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"
    
  /events/{eventId}/comments/{commentId}/like:
    parameters:
    - in: path
      name: eventId
      required: true
      type: string
      description: the event UUID
    - in: path
      name: commentId
      required: true
      type: string
      description: the event comment UUID

    post:
      summary: like an event comment (by the logged-in user)
      tags:
        - Event Comment
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/EventComment"
        400:
          description: invalid request
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        403:
          description: the user is not allowed to like his/her own comment | not allowed to like deleted comment
          schema:
            $ref: "#/definitions/ErrorMessage"
        404:
          description: the event or event comment does not exist
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"

  /events/{eventId}/comments/{commentId}/unlike:
    parameters:
    - in: path
      name: eventId
      required: true
      type: string
      description: the event UUID
    - in: path
      name: commentId
      required: true
      type: string
      description: the event comment UUID

    post:
      summary: unlike an event comment (by the logged-in user)
      tags:
        - Event Comment
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/EventComment"
        400:
          description: invalid request
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        403:
          description: the user is not allowed to unlike deleted comment
          schema:
            $ref: "#/definitions/ErrorMessage"
        404:
          description: the event or event comment does not exist | the user has not liked the event comment yet
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"

  /rewards:
    get:
      summary: search rewards
      tags:
        - Reward
      security:
        - Bearer: []
      parameters:
        - in: query
          name: limit
          type: integer
          description: the search limit. Must be greater than 0 if present
        - in: query
          name: offset
          type: integer
          description: the search offset. Must be not less than 0 if present
        - in: query
          name: sortBy
          type: string
          description: the sort field. Allow `title` and `pointsRequired`
        - in: query
          name: sortDirection
          type: string
          description: the sort direction. Allow `asc` and `desc`. Default to `asc` if not present
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              count:
                type: integer
              rows:
                type: array
                items:
                  $ref: "#/definitions/Reward"
        400:
          description: invalid request
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"

  /rewards/{rewardId}/redeem:
    post:
      summary: redeem a reward for the current logged-in user
      description: >
        - Make sure that the `User.points` is not less than the required points `Reward.pointsRequired`
        
        - Deduct the user points
        
        - Create and return the user reward
      tags:
        - Reward
      security:
        - Bearer: []
      parameters:
        - in: path
          name: rewardId
          type: string
          required: true
          description: the reward UUID to redeem
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/UserReward"
        400:
          description: invalid request
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        404:
          description: the reward does not exist
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"

  /myRewards:
    get:
      summary: get the redeemed rewards of the current logged-in user
      tags:
        - Reward
      security:
        - Bearer: []
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/UserReward"
        400:
          description: invalid request
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"
            
  /myBadges:
    get:
      summary: get the badges of the current logged-in user
      tags:
        - Profile
      security:
        - Bearer: []
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Badge"
        400:
          description: invalid request
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"
            
  /myRewardPoints:
    get:
      summary: get the history of the reward points of the current logged-in user
      tags:
        - Profile
      security:
        - Bearer: []
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/UserRewardPoint"
        400:
          description: invalid request
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"

  /events/{eventId}/survey:
    get:
      summary: get the survey questions of the event for the logged-in user
      tags:
        - Survey
      security:
        - Bearer: []
      parameters:
        - in: path
          name: eventId
          type: string
          required: true
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/SurveyQuestion'
        400:
          description: invalid request
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        403:
          description: the user is not allowed to get survey questions of the event he/she has not attended
          schema:
            $ref: "#/definitions/ErrorMessage"
        404:
          description: the event does not exist
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"
            
    post:
      summary: submit the survey answers of the event for the logged-in user
      description: >
        - Add a new `UserRewardPoint` for completing the survey, the points should be got from the event or configuration
      
        - Add the points to the `User.points`
        
        - Return the `UserRewardPoint`
      tags:
        - Survey
      security:
        - Bearer: []
      parameters:
        - in: path
          name: eventId
          type: string
          required: true
        - in: body
          name: body
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/SurveyAnswer'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/UserRewardPoint'
        400:
          description: invalid request
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        403:
          description: the user is not allowed to submit survey answers for the event he/she has not attended
          schema:
            $ref: "#/definitions/ErrorMessage"
        404:
          description: the event does not exist
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"
      


  /events/{eventId}/quiz:
    get:
      summary: get the quiz questions of the event for the logged-in user
      tags:
        - Quiz
      security:
        - Bearer: []
      parameters:
        - in: path
          name: eventId
          type: string
          required: true
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/QuizQuestion'
        400:
          description: invalid request
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        403:
          description: the user is not allowed to get quiz questions of the event he/she has not attended
          schema:
            $ref: "#/definitions/ErrorMessage"
        404:
          description: the event does not exist
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"
            
    post:
      summary: submit the quiz answers of the event for the logged-in user
      description: >
        - Add a new `UserRewardPoint` for completing the quiz, the points should be got from the event or configuration
      
        - Add the points to the `User.points`
        
        - Return the `UserRewardPoint`
      tags:
        - Quiz
      security:
        - Bearer: []
      parameters:
        - in: path
          name: eventId
          type: string
          required: true
        - in: body
          name: body
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/QuizAnswer'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/UserRewardPoint'
        400:
          description: invalid request
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        403:
          description: the user is not allowed to submit quiz answers for the event he/she has not attended
          schema:
            $ref: "#/definitions/ErrorMessage"
        404:
          description: the event does not exist
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"
            
  /notifications:
    get:
      summary: search notifications of the current logged-in user
      description: the results should be sorted by createdAt descending
      tags:
        - Notification
      security:
        - Bearer: []
      parameters:
        - in: query
          name: limit
          type: integer
          description: the search limit. Must be greater than 0 if present
        - in: query
          name: offset
          type: integer
          description: the search offset. Must be not less than 0 if present
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              count:
                type: integer
              rows:
                type: array
                items:
                  $ref: "#/definitions/Notification"
        400:
          description: invalid request
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"
  
  /notifications/{notificationId}/read:
    post:
      summary: mark a notification as read
      tags:
        - Notification
      security:
        - Bearer: []
      parameters:
        - in: path
          name: notificationId
          required: true
          type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/Notification"
        401:
          description: action is not allowed for anonymous | invalid or expired access token
          schema:
            $ref: "#/definitions/ErrorMessage"
        403:
          description: the user is not allowed to access another user's notification
          schema:
            $ref: "#/definitions/ErrorMessage"
        404:
          description: notification does not exist
          schema:
            $ref: "#/definitions/ErrorMessage"
        500:
          description: server error
          schema:
            $ref: "#/definitions/ErrorMessage"


definitions:
  ErrorMessage:
    type: object
    properties:
      message:
        type: string

  LoginResponse:
    type: object
    properties:
      accessToken:
        type: string
        description: the JWT access token, the client side should cache the accessToken, and put into `Authorization` header of the subsequent calls `Bearer {accessToken}`
      user:
        $ref: "#/definitions/User"

  User:
    type: object
    properties:
      id:
        type: string
        description: the UUID
      email:
        type: string
      fullName:
        type: string
        description: synced from SAML
      division:
        type: string
        description: synced from SAML
      position:
        type: string
        description: synced from SAML
      location:
        type: string
        description: synced from SAML
      phoneNumber:
        type: string
        description: synced from SAML
      photoUrl:
        type: string
        description: synced from SAML
      isNew:
        type: boolean
        description: the flag to indicate that the user is a new or an existing user, if the user is a new user, client side should display the sign-up screens so that the user can select the topic references
      points:
        type: integer
        minimum: 0
        description: the current points
  
  UserSetting:
    type: object
    properties:
      notifiedByNewEvents:
        type: boolean
    required:
      - notifiedByNewEvents

  Topic:
    type: object
    properties:
      id:
        type: string
        description: the UUID
      name:
        type: string
      iconUrl:
        type: string
    required:
      - name
      - iconUrl
  
  UserTopic:
    type: object
    properties:
      id:
        type: string
        description: the UUID
      userId:
        type: string
        description: the user UUID, should be parsed from the access token (current logged-in user id) and should not be present in the request body
      topicId:
        type: string
        description: the topic UUID
    required:
      - userId
      - topicId

  UserRewardPoint:
    type: object
    description: the history of points earned by the user
    properties:
      id:
        type: string
        description: the UUID, should not be present in the request body
      description:
        type: string
      points:
        type: number
        format: integer
        minimum: 1
      createdAt:
        type: string
        format: date
        description: the created date time, generated by the system and should not be present in the request body
      userId:
        type: string
        description: the user UUID
    required:
      - description
      - points
      - createdAt
      - userId
      
  Event:
    type: object
    properties:
      id:
        type: string
        description: the UUID, should not be present in the request body
      title:
        type: string
      description:
        type: string
      pointsForRegistering:
        type: number
        format: integer
        minimum: 1
        description: the points that each attendee earns for registering to the event
      pointsForScanningTicket:
        type: number
        format: integer
        minimum: 1
        description: the points that each attendee earns for scanning ticket
      topicId:
        type: string
      location:
        type: string
      currentBooking:
        type: integer
        description: the current booking
      maxCapacity:
        type: integer
        description: the max capacity
      waitingCapacity:
        type: integer
        description: the waiting capacity
      tags:
        type: array
        items:
          type: string
      sessions:
        type: array
        items:
          $ref: '#/definitions/EventSession'
      portraitImageUrl:
        type: string
        description: the portrait image url (to be displayed in the event list)
      landscapeImageUrl:
        type: string
        description: the landscape image url (to be displayed in the event detail page)
      isMyEvent:
        type: boolean
        description: the flag to indicate whether the current logged-in user has registered to the event

  EventSession:
    type: object
    properties:
      id:
        type: string
        description: the UUID, should not be present in the request body
      title:
        type: string
      location:
        type: string
      start:
        type: string
        format: date
      end:
        type: string
        format: date
      speaker:
        type: object
        properties:
          name:
            type: string
          photoUrl:
            type: string

  EventComment:
    type: object
    properties:
      id:
        type: string
        description: the event comment UUID, should not be present in the request body
      content:
        type: string
      user:
        description: the user to create the comment, should not be present in the request body
        $ref: '#/definitions/User'
      createdAt:
        type: string
        description: the created date time, generated by the system and should not be present in the request body
      likeCount:
        type: integer
        description: the number of likes
      likedByMe:
        type: boolean
        description: the flag to indicate that the comment is liked by the current logged-in user or not
      childComments:
        type: array
        items:
          $ref: '#/definitions/EventComment'
        description: the child comments, not that this app supports only 2 levels of comments (root level and child level) 
      deleted:
        type: boolean
        description: the delete flag
    required:
      - content
      - user
      - createdAt
      - likeCount
      - likedByMe
  
  EventCommentRequest:
    type: object
    properties:
      content:
        type: string
      parentCommentId:
        type: string
        description: the parent comment UUID, null if this is root comment, supporting only 2 levels of comments
    required:
      - content
      
  Carousel:
    type: object
    properties:
      id:
        type: string
        description: the carousel UUID
      title:
        type: string
      mediaUrl:
        type: string
    required:
      - title
      - mediaUrl

  Reward:
    type: object
    properties:
      id:
        type: string
        description: the reward UUID, should not be present in the request body
      title:
        type: string
      iconUrl:
        type: string
      pointsRequired:
        type: integer
        description: the points required to redeem the reward
    required:
      - title
      - iconUrl
      - pointsRequired

  UserReward:
    type: object
    properties:
      id:
        type: string
        description: the user reward UUID
      reward:
        $ref: '#/definitions/Reward'
      expiredAt:
        type: string
        format: date
        description: the expired date time
    required:
      - reward
      - expiredAt
      
  Badge:
    type: object
    properties:
      id:
        type: string
        description: the badge UUID, should not be present in the request body
      title:
        type: string
      iconUrl:
        type: string
      gainedAt:
        type: string
        format: date
        description: the date time that the current logged-in user has gained this badge, null if not gained yet
    required:
      - title
      - iconUrl
      
  SurveyQuestion:
    type: object
    properties:
      id:
        type: string
      question:
        type: string
      type:
        type: string
        enum:
          - text
          - singleChoice
          - multipleChoice
      surveyAnswerOptions:
        type: array
        items:
          $ref: '#/definitions/SurveyAnswerOption'
        description: 0 items if the type is `text`
    required:
      - question
      - type
      
  SurveyAnswerOption:
    type: object
    properties:
      id:
        type: string
      answerOption:
        type: string
    required:
      - surveyQuestionId
      - answerOption
      
  SurveyAnswer:
    type: object
    properties:
      id:
        type: string
        description: the survey answer UUID, should not be present in the request body
      surveyQuestionId:
        type: string
      selectedSurveyAnswerOptionId:
        type: string
        description: null if the question type is `text`
      textAnswer:
        type: string
        description: not null if the question type is `text`
    required:
      - surveyQuestionId
      
  QuizQuestion:
    type: object
    properties:
      id:
        type: string
      question:
        type: string
      type:
        type: string
        enum:
          - text
          - singleChoice
          - multipleChoice
      quizAnswerOptions:
        type: array
        items:
          $ref: '#/definitions/QuizAnswerOption'
        description: 0 items if the type is `text`
    required:
      - question
      - type
      
  QuizAnswerOption:
    type: object
    properties:
      id:
        type: string
      answerOption:
        type: string
    required:
      - quizQuestionId
      - answerOption
      
  QuizAnswer:
    type: object
    properties:
      id:
        type: string
        description: the quiz answer UUID, should not be present in the request body
      quizQuestionId:
        type: string
      selectedQuizAnswerOptionId:
        type: string
        description: null if the question type is `text`
      textAnswer:
        type: string
        description: not null if the question type is `text`
    required:
      - quizQuestionId

  Notification:
    type: object
    properties:
      id:
        type: string
      iconUrl:
        type: string
      content:
        type: string
      createdAt:
        type: string
        format: date
        description: the created date time, generated by the system and should not be present in the request body
      read:
        type: boolean
        description: the flag indicates if the user has read the notification
      relatedObjectType:
        type: string
        description: the object type related to this notification (e.g. Event that is shared from another user)
      relatedObjectId:
        type: string
        description: the object id related to this notification (e.g. Event Id that is shared from another user)
    required:
      - content
      - createdAt
      - read
